AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Image Upload Service: A serverless backend for uploading, downloading, deleting and viewing images.

Parameters:
  AppEnv:
    Type: String
    Description: The application environment (e.g., 'local' for LocalStack, 'stage', 'prod').
    Default: prod

Globals:
  Function:
    Timeout: 10
    Runtime: python3.12
    MemorySize: 128
    Environment:
      Variables:
        APP_ENV: !Ref AppEnv
        IMAGE_BUCKET_NAME: !Ref ImageBucket
        METADATA_TABLE_NAME: !Ref MetadataTable

Resources:
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-images"

  MetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-metadata"
      AttributeDefinitions:
        - AttributeName: imageId
          AttributeType: S
        - AttributeName: contentType
          AttributeType: S
      KeySchema:
        - AttributeName: imageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ContentTypeIndex
          KeySchema:
            - AttributeName: contentType
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ImageServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      BinaryMediaTypes:
        - "image/jpeg"
        - "image/png"
        - "multipart/form-data"

  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-UploadImageFunction"
      CodeUri: .
      Handler: src.handlers.upload_image.handler
      Policies:
        - Statement:
            - Sid: S3PutObjectPermission
              Effect: Allow
              Action: [s3:PutObject]
              Resource: !Sub "arn:aws:s3:::${ImageBucket}/*"
            - Sid: DynamoDBPutItemPermission
              Effect: Allow
              Action: [dynamodb:PutItem]
              Resource: !GetAtt MetadataTable.Arn
      Events:
        Upload:
          Type: Api
          Properties:
            RestApiId: !Ref ImageServiceApi
            Path: /images
            Method: post

  ListImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ListImagesFunction"
      CodeUri: .
      Handler: src.handlers.list_images.handler
      Policies:
        - Statement:
            - Sid: DynamoDBReadPermissions
              Effect: Allow
              Action: [dynamodb:Query, dynamodb:Scan, dynamodb:GetItem]
              Resource:
                - !GetAtt MetadataTable.Arn
                - !Sub "${MetadataTable.Arn}/index/ContentTypeIndex"
      Events:
        List:
          Type: Api
          Properties:
            RestApiId: !Ref ImageServiceApi
            Path: /images
            Method: get

  GetImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetImageFunction"
      CodeUri: .
      Handler: src.handlers.get_image.handler
      Policies:
        - Statement:
            - Sid: S3GetObjectPermission
              Effect: Allow
              Action: [s3:GetObject]
              Resource: !Sub "arn:aws:s3:::${ImageBucket}/*"
            - Sid: DynamoDBGetItemPermission
              Effect: Allow
              Action: [dynamodb:GetItem]
              Resource: !GetAtt MetadataTable.Arn
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ImageServiceApi
            Path: /images/{imageId}
            Method: get

  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-DeleteImageFunction"
      CodeUri: .
      Handler: src.handlers.delete_image.handler
      Policies:
        - Statement:
            - Sid: S3DeleteObjectPolicy
              Effect: Allow
              Action:
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${ImageBucket}/*"
            - Sid: DynamoDBDeleteAndReadPolicy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              Resource: !GetAtt MetadataTable.Arn
      Events:
        Delete:
          Type: Api
          Properties:
            RestApiId: !Ref ImageServiceApi
            Path: /images/{imageId}
            Method: delete

Outputs:
  ImageServiceApi:
    Description: API Gateway endpoint URL for Prod stage for Image Service API
    Value: !Sub "http://127.0.0.1:4566/restapis/${ImageServiceApi}/Prod/_user_request_"
